"""
Code for the Heliotron J data aquisition system
"""

import pyfusion, tempfile, os
from numpy import array, shape, zeros
from sqlalchemy import Column, Integer, Float, String, ForeignKey
try:
    if os.name != 'nt': 
        import gethjdata
    else: print("*** not attempting to compile heliotron acquisition code on Windows")
except:
    import commands
    print 'Compiling Heliotron J data aquisition library, please wait...'
    cdir = os.path.dirname(os.path.abspath(__file__))
## Note: g77 will do, (remove --fcompiler-g95)  but can't use TRIM function etc 
    if pyfusion.settings.VERBOSE > 4: tmp = os.system(
        'cd %s; f2py --fcompiler=gnu95 -c -m gethjdata -lm -lfdata hj_get_data.f' %cdir)
    else: tmp = commands.getstatusoutput(
        'cd %s; f2py --fcompiler=gnu95 -c -m gethjdata -lm -lfdata hj_get_data.f' %cdir)
    try:
        import gethjdata
    except:
        raise ImportError, "Can't import Heliotron J data acquisition library"
    


class HJChannel(pyfusion.Channel):
    __tablename__ = 'hjchannels'
    __mapper_args__ = {'polymorphic_identity':'HJ'}
    id = Column('id', Integer, ForeignKey('channels.id'), primary_key=True)
    name = Column('name', String(50), unique=True)
    length = Column('length', Integer)
    time_unit_in_seconds = Column('time_unit_in_seconds', Float, default = 0.001)
#    # had to add to allow time unit to default - silly!
#    def __init__(self, name=None, length=None):
#        if pyfusion.settings.VERBOSE>4: print("init HJChannel %s" % name)
#        self.time_unit_in_seconds=.001
#        self.length=length
#        self.name=name

class ProcessData:
    def load_channel(self, hjch, shot):
        return get_hjchannel(shot, hjch)


def get_hjchannel(shot_number,channel,datalen_override=-1):
    """
    get data for channel
    """
    outfilename = tempfile.mktemp(prefix='pyfusion_')
    if pyfusion.settings.VERBOSE>2: print("will get data by writing to temp file ", outfilename)
#    try:
    outdata=zeros(1024*2*256+1)
    getrets=gethjdata.gethjdata(shot_number,channel.length,channel.name,
                                pyfusion.settings.VERBOSE, pyfusion.settings.OPT,
                                outfilename, outdata)
    if pyfusion.settings.VERBOSE>2: print('returns ', getrets, shape(getrets), 'outdata is', outdata)
#    return hjdatafile2mcd(outfilename,1,[channel.name],data=getrets[1:], deletefile=True)
    return hjdatafile2mcd(outfilename,1,[channel.name],data=getrets[1:1+2*channel.length], deletefile=True)
#    except:
    os.remove(outfilename)        


def hjdatafile2mcd(filename,n_channels,channelnames,data=None,deletefile=False):
    """
    read output file generated by Satoshi's code, and put into dictionary
    """
    
    if pyfusion.settings.OPT <= 0: 
        f = open(filename)
        raw_data = f.read().split()
        f.close()
    else: raw_data=data
    if pyfusion.settings.VERBOSE>5: print('raw data: ', raw_data,shape(raw_data))
    # use [::n_channels+1], where +1 is due to timebase
    mc_data = pyfusion.MultiChannelTimeseries(array(map(float,raw_data[::n_channels+1])))
    for cn in range(n_channels+1)[1:]:
        mc_data.add_channel(array(map(float,raw_data[cn::n_channels+1])), channelnames[cn-1])
    if (deletefile==True) and (pyfusion.settings.OPT <= 0):
        os.remove(filename)
    return mc_data
