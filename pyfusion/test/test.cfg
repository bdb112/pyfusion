# Config file for pyfusion tests
[global]
database = sqlite:///:memory:
#database = sqlite:///tmp/test.db
tmpdatabase = None

[variabletypes]
Diagnostic__sample_freq = float
Diagnostic__t0 = float
Diagnostic__amplitude = float
Diagnostic__frequency = float
Diagnostic__n_samples = int
Diagnostic__testboolean = bool
Diagnostic__unknowntype = xxx

# Test device, used for testing Device class
[Device:TestDevice]
dev_class = pyfusion.devices.base.Device
database = None
acq_name = test_fakedata

[Acquisition:test_baseacq]
acq_class = pyfusion.acquisition.base.BaseAcquisition
dummy_var_1 = 0
dummy_var_2 = 1

[Acquisition:test_fakedata]
acq_class = pyfusion.acquisition.FakeData.acq.FakeDataAcquisition
dummy_var_1 = 0
dummy_var_2 = 1

[Acquisition:test_DSV]
acq_class = pyfusion.acquisition.DSV.acq.DSVAcquisition
dummy_var_1 = 0
dummy_var_2 = 1


# dummy channel for testing variabletypes
[Diagnostic:test_types]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
testboolean = True
unknowntype = yyy

# test channel entry for single channel timeseries
[Diagnostic:test_timeseries_channel_1]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 1.2
frequency = 3.e3

[Diagnostic:test_timeseries_channel_2]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 0.5
frequency = 2.e3

[Diagnostic:test_timeseries_channel_3]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 0.3
frequency = 3.e3

[Diagnostic:test_timeseries_channel_4]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 0.4
frequency = 4.e3

[Diagnostic:test_timeseries_channel_5]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 0.3
frequency = 2.e3

[Diagnostic:test_timeseries_channel_6]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 0.7
frequency = 2.e3


[Diagnostic:test_timeseries_shot_unique]
data_fetcher = pyfusion.acquisition.FakeData.fetch.SingleChannelSineUniqueForShotFetcher
sample_freq = 1.e6
n_samples = 1000
t0 = 0.0
amplitude = 1.2
frequency = 3.e3

[Diagnostic:test_multichannel_timeseries_large]
data_fetcher = pyfusion.acquisition.base.MultiChannelFetcher
channel_1 = test_timeseries_channel_1
channel_2 = test_timeseries_channel_2
channel_3 = test_timeseries_channel_3
channel_4 = test_timeseries_channel_4
channel_5 = test_timeseries_channel_5
channel_6 = test_timeseries_channel_6


# Test will fail if this device contains anything
[Device:TestEmptyDevice]

[Diagnostic:test_multichannel_timeseries]
data_fetcher = pyfusion.acquisition.base.MultiChannelFetcher
channel_2 = test_timeseries_channel_2
channel_1 = test_timeseries_channel_1

[Diagnostic:Test_H1_diag]
data_fetcher = pyfusion.acquisition.H1.fetch.H1DataFetcher
mds_path = \h1data::top.operations.mirnov:a14_16:input_2
coords_cylindrical = 0.696, 0.7732, -0.106

[Diagnostic:Test_H1_multi_small]
data_fetcher = pyfusion.acquisition.base.MultiChannelFetcher
channel_1 = Test_H1_diag
channel_2 = -Test_H1_diag


[Device:H1]
dev_class = pyfusion.devices.H1.device.H1
acq_name = Test_H1

[Acquisition:Test_H1]
acq_class = pyfusion.acquisition.MDSPlus.acq.MDSPlusAcquisition
h1data_path = /tmp
h1data_path = /2TBRAID/h1data

[Diagnostic:test_binary_diag]
data_fetcher=pyfusion.acquisition.binary.fetch.BinaryMultiChannelTimeseriesFetcher
filename = dummy_name_overridden_in_tests
dtype = np.dtype([('timebase',np.float32),('channel_1',np.float32),('channel_2',np.float32)])

[Diagnostic:test_binary_diag_multifile]
data_fetcher=pyfusion.acquisition.binary.fetch.MultiFileBinaryMultiChannelTimeseriesFetcher
filename = ['dummy_filename_1', 'dummy_filename_2']
dtype_1 = np.dtype([('timebase',np.float32),('channel_1',np.float32),('channel_2',np.float32)])
dtype_2 = np.dtype([('timebase',np.float32),('channel_3',np.float32),('channel_4',np.float32)])

