"""
Code for the Heliotron J data aquisition system
"""

import pyfusion, tempfile, os
from numpy import array
from sqlalchemy import Column, Integer, String, ForeignKey
try:
    import gethjdata
except:
    import commands
    print 'Compiling Heliotron J data aquisition library, please wait...'
    cdir = os.path.dirname(os.path.abspath(__file__))
    tmp = commands.getstatusoutput('cd %s; f2py -c -m gethjdata -lm -lfdata hj_get_data.f' %cdir)
    try:
        import gethjdata
    except:
        raise ImportError, "Can't import Heliotron J data acquisition library"
    


class HJChannel(pyfusion.Channel):
    __tablename__ = 'hjchannels'
    __mapper_args__ = {'polymorphic_identity':'HJ'}
    id = Column('id', Integer, ForeignKey('channels.id'), primary_key=True)
    name = Column('name', String(50), unique=True)
    length = Column('length', Integer)


class ProcessData:
    def load_channel(self, hjch, shot):
        return get_hjchannel(shot, hjch)


def get_hjchannel(shot_number,channel,datalen_override=-1):
    """
    get data for channel
    """
    outfilename = tempfile.mktemp(prefix='pyfusion_')
    try:
        gethjdata.gethjdata(shot_number,channel.length,channel.name,outfilename)
        return hjdatafile2mcd(outfilename,1,[channel.name],deletefile=True)
    except:
        os.remove(outfilename)        


def hjdatafile2mcd(filename,n_channels,channelnames,deletefile=False):
    """
    read output file generated by Satoshi's code, and put into dictionary
    """
    
    f = open(filename)
    raw_data = f.read().split()
    f.close()
    # use [::n_channels+1], where +1 is due to timebase
    mc_data = pyfusion.MultiChannelTimeseries(array(map(float,raw_data[::n_channels+1])))
    for cn in range(n_channels+1)[1:]:
        mc_data.add_channel(array(map(float,raw_data[cn::n_channels+1])), channelnames[cn-1])
    if deletefile==True:
        os.remove(filename)
    return mc_data
