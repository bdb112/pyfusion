"""
Code specific to Heliotron J
Need to generalise this..., want to pass channel name and retrieve data from external code

how to compile fortran:
need to use f2py which comes with numpy

f2py -c -m <python module name> -lm -lfdata <fortran file>
"""

import tempfile,os
# TODO this will fail if not compiiled in, need to be able to run if this import fails (i.e.: using local_data function...)
#import gethjdata

from pyfusion.core import MultiChannelTimeseries
from numpy import array

diag_dict =  {'NBIS9I':1024,  \
              'NBIS10I':1024, \
              'NBIS910V':1024,\
              'NBIS3I':1024,  \
              'NBIS4I':1024,  \
              'NBIS34V':1024, \
              'ECHRG500':1024,\
              'ECHG2':1024,   \
              'ECHG4T':1024,  \
              'ECHG4':1024,   \
              'ECHRG500B':1024,\
              'ICRFP1':1024,  \
              'ICRFP2':1024,  \
              'ICRFP3':1024,  \
              'ICRFP4':1024,  \
              'GASPUFF#1':1024,\
              'GASPUFF#2':1024,\
              'GASPUFF#9.5':2048,\
              'GASPUFF#15.5':2048,\
              'HALPHA3.5':2048,\
              'HALPHA7.5':2048,\
              'HALPHA11.5':2048,\
              'HALPHA15.5':2048,\
              'VISIBLE1':1024,\
              'VISIBLE2':1024,\
              'VISIBLE3':1024,\
              'VISIBLE4':1024,\
              'VISIBLEMONITOR':1024,\
              'BOLOMETER14':1024,\
              'BOLOMETER26':1024,\
              'AXUV':1024,\
              'SX1.6AL':1024,\
              'SX6AL':1024,\
              'SXTEMP':1024,\
              'IS9FAST':1024*256,\
              'VF11FAST':1024*256,\
              'DP-2RLP':1024*256,\
              'DP-2RLP':1024*256,\
              'MP1':1024*256,\
              'MP2':1024*256,\
              'MP3':1024*256,\
              'MP4':1024*256,\
              'PMP1':1024*256,\
              'PMP2':1024*256,\
              'PMP3':1024*256,\
              'PMP4':1024*256,\
              'PMP5':1024*256,\
              'PMP6':1024*256,\
              'PMP7':1024*256,\
              'PMP8':1024*256,\
              'PMP9':1024*256,\
              'PMP10':1024*256,\
              'PMP11':1024*256,\
              'PMP12':1024*256,\
              'PMP13':1024*256,\
              'PMP14':1024*256,\
              'ECE1FAST':1024*16,\
              'ECE2FAST':1024*16,\
              'ECE3FAST':1024*16,\
              'ECE4FAST':1024*16,\
              'ECE5FAST':1024*16,\
              'ECE6FAST':1024*16,\
              'ECE7FAST':1024*16,\
              'ECE8FAST':1024*16,\
              'ECE9FAST':1024*16,\
              'ECE10FAST':1024*16,\
              'ECE11FAST':1024*16,\
              'ECE12FAST':1024*16,\
              'ECE13FAST':1024*16,\
              'ECE14FAST':1024*16,\
              'ECE15FAST':1024*16,\
              'ECE16FAST':1024*16,\
              'SXR001':1024,\
              'SXR002':1024,\
              'SXR003':1024,\
              'SXR004':1024,\
              'SXR005':1024,\
              'SXR006':1024,\
              'SXR007':1024,\
              'SXR008':1024,\
              'SXR009':1024,\
              'SXR010':1024,\
              'SXR011':1024,\
              'SXR012':1024,\
              'SXR013':1024,\
              'SXR014':1024,\
              'SXR015':1024,\
              'SXR016':1024,\
              'SXR017':1024,\
              'SXR018':1024,\
              'SXR019':1024,\
              'SXR020':1024 \
              }
              

def hjdatafile2mcd(filename,n_channels,channelnames,deletefile=False):
    """
    read output file generated by Satoshi's code, and put into dictionary
    """
    f = open(filename)
    raw_data = f.read().split()
    f.close()
    # use [::n_channels+1], where +1 is due to timebase
    mc_data = MultiChannelTimeseries(array(map(float,raw_data[::n_channels+1])))
    for cn in range(n_channels+1)[1:]:
        mc_data.add_channel(array(map(float,raw_data[cn::n_channels+1])), channelnames[cn-1])
    if deletefile==True:
        os.remove(filename)
    return mc_data
    

def get_channel(shot_number,channel,datalen_override=-1):
    """
    get data for channel
    will use data length as given in diag_dict unless datalen_override>=0
    """
    if not diag_dict.has_key(channel):
        raise ValueError, 'Unknown data channel %s' %channel

    nch = 1
    
    if datalen_override >=0:
        datalen = datalen_override
    else:
        datalen = diag_dict[channel]

    outfilename = tempfile.mktemp(prefix='pyfusion_')

    try:
        gethjdata.gethjdata(shot_number,datalen,channel,outfilename)
        return hjdatafile2mcd(outfilename,nch,[channel],deletefile=True)
    except:
        os.remove(outfilename)        

def get_diag(shot_number,diag):
    """
    get data for diagnostic
    """
    #if diag
    pass
    #if diag == 'PMP':
    #    n_channels = 14
    #    hjgetmirnov.getmirnov(shot_number)
    #    return hjdatafile2mcd('tmp_data.dat',n_channels)
