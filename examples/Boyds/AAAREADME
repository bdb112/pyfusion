These are examples adapted or created by Boyd.
Some are simple tests, others are more complicated scripts to do actual 
analysis.  Their separation from the parent directory ../examples allows
that directory to be reserved for simple or illustrative scripts.

PLEASE ALWAYS confirm examples/always_validate_test_signals.py completes 
before committing!

Note that the script form of these means that, provided unnecessary
code, variables or imports are avoided, these scripts can usually be
run on earlier datasets.  This aids in tracing when analysis changed
or bugs were introduced, as the newer scripts can be more revealing.

We also need a site-independent validation suite.
The beginning of this is examples/always_validate_test_signals.py

Below is a log of which example files worked under which version.

r324 and around:  Here are the fixups required to old data.
As we have altered the Db structure fir time_unit_in_seconds, might as well
add a couple of descriptions and a time stamp.

alter table dm_fs_set add column description varchar(1000);
alter table dm_cluster_datasets add column description varchar(1000);
alter table shots add column proc_date datetime;
alter table Channels add column time_unit_in_seconds float default 0.001; 
# ( default 1. for H1)
alter table HJChannels add column time_unit_in_seconds float default 0.001; 
alter table mdspluschannels add column time_unit_in_seconds float default 1.



r309:
/C/Python25/python examples/save_to_local.py shot_number=58123 'diag_name="mirnov_small"'
ipython examples/Boyds/wid_specgram.py shot_number=58123
#   note - running from ipython shell invocation can cause graphics to be 
#   updated incrementally (and slowly).  Runs faster at the ipython prompt.

r260: Dendrogram link error.

but you were right, this is a fix anyway
from pyfusion.datamining.clustering.plots import DendrogramLink
DendrogramLink.__table__.create()
allowed pyfusion.utils.show_db()
to work
I guess pyfusion.utils.show_db() gets a little nosey...
Sent at 9:46 PM on Saturday
Boyd: Need to do same with Dendrogram


r201: (Dave)
I have changed the way environment variables are read into pyfusion. 
Any environment variable PYFUSION_XXX is available under pyfusion.settings.XXX, unless XXX starts with __
If pyfusion.settings.XXX already exists, the new environment variable is cast to type(pyfusion.settings.XXX)
PYFUSION_SETTINGS_XXX listed here now need to be PYFUSION_XXX

r170: python examples/always_validate_test_signals.py (first version)
works with some warnings:
    importing pyfusion_local_settings
    Creating shot TestDevice:1000
    Only MultiChannel Timeseries data works for now
    RHOME= /usr/lib/R
    RVERSION= 2.4.1
    RVER= 2041
    RUSER= /home/bdb112
    Loading Rpy version 2041 .. Done.
    Creating the R object 'r' ..  Done
    use of mclust requires a license agreement
    see http://www.stat.washington.edu/mclust/license.txt
    Warning:  not checking channel_pairs!!
    maybe error... 0 4 fs.id= 3
    maybe error... 0 4 fs.id= 6
    maybe error... 0 4 fs.id= 9
    maybe error... 0 4 fs.id= 12
    maybe error... 0 4 fs.id= 15
    maybe error... 0 4 fs.id= 18
    maybe error... 0 4 fs.id= 21
    maybe error... 0 4 fs.id= 24
    maybe error... 0 4 fs.id= 27
and sometimes: clustering/core.py:338: SyntaxWarning: import * only allowed at module level

examples/h1_quick_validate.py  complettes with similar warnings.  I am not comvinced about the phase  - there are too many 0 and pis!

r146:
# great for confirming data, but so far, assumes H1
ipython examples/Boyds/wid_specgram.py 
# example to show all the SQL commands used
export PYFUSION_SETTINGS_VERBOSE=7
export PYFUSION_SETTINGS_SQL_SERVER="sqlite:///:memory:"
export PYFS='pyfusion.settings'
export DN="'mirnov_small'"
python examples/Boyds/test_pyfusion.py diag_name=$DN shot_number=66017 $PYFS.SHOT_T_MIN=0.076 $PYFS.SHOT_T_MAX=0.08 $PYFS.N_SAMPLES_TIME_SEGMENT="2**11" > sql.log ; ls -l sql.log


r131:
#Argon svd 
ipython examples/Boyds/h1_svd.py diag_name="'mirnovbean1'" shot_number=66017 t0=0.07 t1=0.08 pyfusion.settings.SHOT_T_MAX=0.1
export DN="'mirnov_small'"
ipython examples/Boyds/test_pyfusion.py "diag_name='mirnov_small'" shot_number=66017 $PYFS.SHOT_T_MIN=0.0 $PYFS.SHOT_T_MAX=0.08 $PYFS.N_SAMPLES_TIME_SEGMENT="2**11"

run examples/Boyds/test_clusters0.py diag_name="'mirnov_small'"


r126:
As per r125, but add
# OK, but fails at plot line.
# note: need to change device to "TestDevice" in local_settings
export PYFUSION_SETTINGS_DEVICE="TestDevice"
ipython examples/datamining_test_signals.py 

r125:
python examples/h1_quick_validate
#OK, needed to increase time range to 20-40 ms to get 10 clusters.

# Runs from raw to clusters in about 15 seconds:  
# this is very similar to quick_validate
# problem with mismatch between channels and ordered_channel_list is
# suppressed by running it one, in ipython - needs proper fix
export DN="'mirnov_small'"
ipython examples/Boyds/test_pyfusion.py "diag_name='mirnov_small'" shot_number=58123 pyfusion.settings.SHOT_T_MIN=0.03 pyfusion.settings.SHOT_T_MAX=0.06
run examples/Boyds/test_clusters0.py diag_name="'mirnov_small'"


r123: 
Lots of problems due to forced partial update, fixed in 125


#version 115: 
test_pyfusion.py "diag_name='mirnov_all'" shot_number=58123 pyfusion.settings.SHOT_T_MIN=0.04 pyfusion.settings.SHOT_T_MAX=0.06
#*OK*

python examples/Boyds/test_clusters0.py diag_name="'mirnov_all'"
# works - data looks OK, but only one shot...hard to judge properly

python examples/Boyds/test_clusters.py diag_name="'mirnov_all'"
# fails - chpair[0].id  - chpairs are strings ?

# this illustrates ordered channels error for diag_name
python examples/Boyds/test_pyfusion.py "diag_name='mirnov_small'" shot_number=58123 pyfusion.settings.SHOT_T_MIN=0.04 pyfusion.settings.SHOT_T_MAX=0.06
ipython examples/Boyds/test_clusters0.py diag_name="'mirnov_small'"

# use ENV var to illustrate ordered_channel_list bug
export DN="'mirnov_small'"
python examples/Boyds/test_pyfusion.py diag_name=$DN shot_number=58123 pyfusion.settings.SHOT_T_MIN=0.04 pyfusion.settings.SHOT_T_MAX=0.06
ipython examples/Boyds/test_clusters0.py diag_name=$DN


diag.ordered_channel_list
Out[3]: ['mirnov_1_4', 'mirnov_1_7', 'mirnov_1_8', 'mirnov_1_9']
 
diag.ordered_channels()
No rows returned for one()

looks like it may be due to assumption that there is more than one toroidal angle - BUT

There is a discrepancy between these two - shoudl be same length - 
seems like assignment in H1.py is stealing channels!
Yes, I can see that if the pointer is changed, rather than a new object made!
see below
In [2]: len(diag.ordered_channel_list)
Out[2]: 4

In [3]: len(diag.channels)
Out[3]: 0
'sqlite:///relative/path/to/database.txt'  'sqlite://:memory:'
'sqlite:///sqlite.txt' 

